{
  
  "1": {
    "title": "COMOKIT Albatross",
    "content": "COMOKIT Albatross (C-Albatross) . COMOKIT-Albatross is a dedicated custom adaptation of COMOKIT. It simulates the spread of SARS-CoV-2 at the scale of the Netherlands. The activity diary for COMOKIT comes from the pre-generated mobility agenda in Albatross. The daily activities in Albatross are modelled at the precision of a minute, while the default COMOKIT behavior is modelled at the precision of one hour. The atomic spatial unit of this extension is at a Dutch 6-digit Postal Block level compared to the building level in COMOKIT. Epidemiological dynamics for COMOKIT-Albatross has also been modified to take into account this larger atomic spatial unit. The larger spatial resolution makes it possible to simulate a wider region, and fits the required spatial distribution of activities as modelled in Albatross agenda generator. . Albatross: A brief history . Albatross, currently in its version IV was first developed in the year 2000. Between years 2000-2010, three different versions of Albatross have been developed. It is based on the CHAID algroithm for decision trees and tables to extract decision heuristics from a national level activity-travel data. In its version IV, the fundamental change is to move away from a single-day activity generation to a multi-day dynamic forecasting systems. Please refer the following for full details. . Rasouli, S., Kim, S., &amp; Yang, D. (2018). Albatross IV: from single day to multi time horizon travel demand forecasting. In Transportation Research Board 97th Annual Meeting. . Model Summary . Item COMOKIT COMOKIT-ALBATROSS ALBATROSS . Time Step | 60 min | [10,15,30,60] min | 1min | . Spatial Unit | Building | Dutch-6 digit post code level | Dutch - 4 digit post code level | . Spatial Unit - Area | - | 3000-7000 sq.m | 0.8mil-1.9mil sq.m | . Social network model | Yes | Yes | No | . School Activities? | Yes | Currently No | No | . Infection Modeling | Yes | Yes | No | . Infection Model | SEIR/SIR | (modified) | None | . Activity Agenda | Generated | read from Albatross | Generated | . Size of area modelled | Urban Locality | City/ Country | Country | . C-Albatross : extends activity behavior in COMOKIT . Reading agenda generated by the third party software Albatross . TODO . Upscaling daily activity location . C-Albatross : revised epidemiological dynamic . This extension, in particular, replaces the default epidemiological dynamics that are inbuilt in COMOKIT and is outline below. For details, contact the authors. . The probability to become infected (exposed) for individual n at a time step ùë° can be written as: . . k: activity at a specific location l . t: a time step when individual n leaves a building (or equally means a time step when activity k ends). For example, a time step where t5 belongs in the figure below. . . m: sum over sampled individuals during activity k . M: total number of individuals interact with individual n during activity k : . random sampling of an arbitrarily pre-defined M number of individuals (between 3 and 12 as in the Berlin case?) | random sampling of M number of individuals dependent on a) total duration of activity k, and b) density of the location for activity k | stratified sampling by social network groups (namely, friends, colleagues, relatives, and strangers) of an arbitrarily pre-defined M number of individuals | stratified sampling by social network groups (namely, friends, colleagues, relatives, and strangers) of M number of individuals dependent on a) total duration of activity k, and b) density of the location for activity k | $ theta$: a parameter to be calibrated . $ tau_{n,m,k}$ : duration of interaction between two individuals . $i_{n,m,k}$ : contact intensity . ‚Äã $ i sim density times weight_{activity type} times weight_{social network group} $ . where . $ density = frac{number of individuals}{number of addresses} $ . $q_{m,t}$ : viral shedding (release) rate (different rates by individual m‚Äôs status, e.g., symptomatic, asymptomatic) . ‚Äã $q sim q prime times weight_{status} $ . $q prime$ may follow some (age-specific, latent-period, infectious-period) distributions 1 . Status $Weight_{status}$ . Symptomatic | 1 | . Asymptomatic/Pre-symptomatic | 0.45 | . Susceptible | 0 | . Activity Type $Weight_{activity type}$ Social Network group $Weight_{social network group}$ . Home0 | 0.50 | Friends | 0.7 | . Work2 | 0.50 | Colleagues | 0.7 | . BringGet3 | 0.10 | Relatives | 0.7 | . Business2 | 0.50 | Strangers (all others) | 0.5 | . Groceries3 | 0.70 | ¬† | ¬† | . NonGroc3 | 0.70 | ¬† | ¬† | . Services3 | 0.70 | ¬† | ¬† | . Leisure2 | 0.70 | ¬† | ¬† | . Social1 | 0.80 | ¬† | ¬† | . Touring1 | 0.50 | ¬† | ¬† | . Other3 | 0.50 | ¬† | ¬† | . C-Albatross : preliminary results . no reliable references yet.¬†&#8617; . |",
    "url": "https://comokit.org/docs/officialExtensions/C-Albatross",
    "relUrl": "/officialExtensions/C-Albatross"
  }
  ,"2": {
    "title": "Model description",
    "content": "Short description of the COMOKIT tookit . COMOKIT proposes 3 models based on a common foundation, each adapted to a different scale of analysis: the Meso model corresponds to the historical model of COMOKIT and is adapted to simulations at the scale of a neighborhood or a small city. The Micro model allows to represent explicitly the movements of people and is adapted to simulations at the scale of a building or a small set of buildings. Finally, COMOKIT macro, which does not propose an individual representation of people, is adapted to perform large-scale simulations. . . Description of the COMOKIT Meso model Overview Purpose | Entities, state variables, and scales Scales | Entities | | Process overview and scheduling | | Design Concepts Basic principles | Interaction | Collectives | | Details Built-in synthetic population generator | Synthetic agenda | | Submodels Epidemiological submodel | Daily Activities | Institutions | | | Description of the COMOKIT Micro model Overview Purpose | Entities, state variables, and scales Scales | Entities | | Process overview and scheduling | | Design Concepts Basic principles | Interaction | | Details Initialization | | Submodels Epidemiological submodel | | | Description of the COMOKIT Macro model Overview Purpose | Entities, state variables, and scales Scales | Entities | | Process overview and scheduling | | Design Concepts Basic principles | Interaction | | Details Initialization | | Submodels Epidemiological submodel | Institutions | | | . Description of the COMOKIT Meso model . We describe in this section the COMOKIT Meso model (version 2.0) using the standard O.D.D. protocol (the full description is also available). . Overview . Purpose . This model aims at simulating and comparing the application of COVID-19 spread mitigation policies at the scale of a closed commune, the transmission of the disease being modeled at the individual scale. Its purpose is to support deciders and researchers in answering questions such as: Is the containment of a neighborhood more effective than that of an entire village? Does closing schools decrease the transmission peaks ? How does wearing masks impact the dynamics of the epidemy ? How long should a lockdown ideally last ? What proportion of the population should be allowed to undertake activities during a lockdown ? . Several case studies are provided with the model: two Vietnamese communes of Son Loi (Vinh Phuc, Vietnam) and Thua Duc (Ben Tre, Vietnam); the small town of Castanet Tolosan (near Toulouse, France); and one abstract data sample. . Beyond these case studies, the model has been designed as a framework generic enough to be applied to any case study as long as the correct input data is provided. In particular, there is a template model ready to be re-used to start applying COMOKIT on a new set of data (see more in setupYourOwn) . Entities, state variables, and scales . Scales . The simulation model have been designed to be executed at the scale of a commune (around 10km2 and 10k inhabitants) but there is no limitation on the scale of the model except computer power to be simulated. The smallest considered spatial units are individual buildings. . The simulations are not launched from a specific starting date, but rather from the introduction of the first infected cases in the population and will run until the end of the epidemic. The simulation step is set to 1 hour. . Entities . The core entity of the model is the Individual agents (or species): it represents individual inhabitants of the commune with their individual characteristics (age, sex, employment status) and their epidemiological status and related variables. They perform their daily activities depending on their personal agenda. This agenda is a generated set of Activity that can be shared by several individuals (e.g. going to a restaurant with some friends), depending on the age and family status of the Individual agent. Individual agents‚Äô attributes include their relatives (i.e. the household), their friends , their colleagues (or classmates) and their home, working place and school Building. . Building agents are spatial entities where the Individual agents can perform an Activity, whether this Activity depending on the Building type. Two special Building kinds have been defined as they have an important role in the simulation: outside, that represents everything outside the studied area, and Hospital, where sick Individual agents with critical symptoms can be contained and healed. . The Individual hourly behavior is driven by their agenda attribute that associates to some hours of the day an Activity. Individuals have preferences for activities that can be parametrized according to their age and sex : for a leisure activity, a child may prefer to go to a game center while an older person may prefer to go to a movie theater. The Building place to carry out an activity can be elicited at random (uniformly), choosing the closest one, or following a probability as a negative function of distance and positive function of area of the targeted place. . We have also defined additional specific Activity species to represent the main classical kinds of Activity: visiting_neighbor, working, staying_home, studying, visiting_friend. Of course, customs activities can also be created from the generic Activity species. . Process overview and scheduling . The dynamics of the model can be summarized by three main dynamics: the epidemic dynamics, the hourly activities of the Individual agents and the dynamics of policy adoption and application. . Considering the epidemic dynamics, there are two different pathways of infection for Individual agents: either through Individual-to-Individual transmission, or through persistence of the virus in the environment. . A simulation step starts by the Individual agents checking whether they are infected or infect other Individuals. They then update their epidemic status and their individual behavior related to mask wearing. Next, they execute their daily activities (depending on Authority allowances). Finally, the Authority agent checks its current Policy and apply it. . Design Concepts . Basic principles . As far as the epidemiological dynamics is concerned, we rely on a SEIR model with an infectious state that can be presymptomatic, symptomatic or asymptomatic, with a certain degree of survivability of the virus in the environment. . The Individual agents‚Äô behavior is described using an activity-based approach: people have a set of activities associated with some day hours. This agenda makes the agents move from Building to Building (due to the 1-hour step of the simulation). . Interaction . Individual agents can infect other Individual agents directly through contact or indirectly through building contamination: the virus can survive in the Building for a period of time. Interactions between Individual agents and the Authority agents occur in both directions. . Collectives . Individual agents are part of several agents collectives: relatives, friends, colleagues, activity fellows. Nevertheless these collectives are not agentified with a specific behavior. The only impact is on the transmission in a same building. The main idea is that individuals in the same building will not have the same number of contacts with all the individuals in a (working or home) building. They thus have more chances to infect close colleagues or relatives. . Details . Built-in synthetic population generator . The synthetic population of agents comprises three dimensions of agent attributes to be generated: demographic variables, including age, sex, employment status (is_unemployed) and households (household_id), social network variables, including the lists of friends, colleagues or classmates, and lastly mobility variables including activity timeline and corresponding activity locations (agenda_week). In this version of the model, only demographic variables can be initialized from an external csv file generated by an external synthetic population generator. The other variables are generated from a COMOKIT built-in generator. . For the external synthetic population generator, we choose to use the Gen* generator (that can also be coupled with the GAMA platform): . Chapuis, K., Taillandier, P., Renaud, M., &amp; Drogoul, A. (2018). Gen*: a generic toolkit to generate spatially explicit synthetic populations. International Journal of Geographical Information Science, 32(6), 1194-1210. . Synthetic agenda . Each agent of the model has its own set of timely organized activities, i.e. a synthetic agenda. The generation of agendas is based on demographic attributes of the agent, such as sex, age and employment status, and the specification of workdays and days off during the week. . Submodels . Epidemiological submodel . The epidemiological model is based on the SEIR model with an infectious state that can be presymptomatic, symptomatic or asymptomatic. Once the infectious period is over, Individual agents reach the Removed (R) state, representing the fact that the Individual has been infected, but is not infectious anymore. To represent deaths and recoveries, we decided to consider the current clinical status of the Individual agent: when it becomes symptomatic, an Individual will first need hospitalisation, and then (with a given probability) ICU. If the Individual agent is not being taken to a Hospital before the end of its expected period needing ICU, it will be considered as dead due to lack of treatment. In the case, it went to ICU when needed, it has a probability to recover. . The various (incubation‚Ä¶) periods and probabilities are Individualdependent and are randomly picked following various distributions. . Daily Activities . Once weekly and daily agendas have been created at initialization, Individual agents have only to get, at each simulation step, the Activity corresponding to the current day and current hour, asks the Authority agent‚Äôs authorization to perform it, finds a building associated with the Activity, and moves in it. In addition, the agent will ask the Authority for the number of individuals it can perform the Activity with. . Institutions . The Authority agent is in charge of applying one or several mitigation policies on the whole case study or on some local spaces. The policies can impact the simulation in two ways. Every step, the Authority can proactively perform some actions encoded in the policy, e.g. conduct a given number of tests on the population. On the other hand, each Individual agent asks the Authority whether it is allowed to execute a given Activity. In this case, the Authority will make its choice based on what is allowed by its policies that are currently applied. . . Description of the COMOKIT Micro model . We describe in this section the COMOKIT Micro model (version 2.0) using the standard O.D.D. protocol (the full description is also available). . Overview . Purpose . This model aims at simulating and comparing the application of COVID-19 spread mitigation policies at the scale of a building or a small set of buildings, the transmission of the disease being modeled at the individual scale. Its purpose is to support deciders and researchers in answering questions such as: Is the containment of some rooms more effective than that of an entire floor? What is the impact of wearing masks on the dynamics of the epidemic? What should be the maximum density to limit spread? What proportion of the population should be allowed to undertake activities during a lockdown? . Two case studies are provided with the model: one concerning a classic office with a second building representing the office restaurant; one concerning the hospital of Danang. . Entities, state variables, and scales . Scales . The simulations are executed at the scale of a set of buildings. The smallest considered spatial units are individual rooms. . The simulations are not launched from a specific starting date, but rather from the introduction of the first infected cases in the population and will run until the end of the epidemic. The simulation step is set to 1 minute. . Entities . The model is designed to simulate the COVID-19 spread at the individual scale. As a consequence, the core entity of the model is the Individual kind of agents (or species): it represents individual users of the buildings with their individual characteristics (age, sex, employment status) and their epidemiological status, whether they have been tested, and other epidemiological individual-dependent values (e.g. latent_time, infectious_time ‚Ä¶ c.f. the epidemiological submodel description for more details). They perform their daily activities (including going to their office, going to the restaurant, going to the meeting room‚Ä¶) depending on their personal agenda. This agenda is a generated set of Activity. . Room agents are spatial entities where the Individual agents can perform an Activity. A Room has one or several RoomEntry agents and several Wall agents. It is located at a specific floor of a Building agent. A specific type of Room is Elevator, allowing Individual agents to pass from one floor to another one. In addition to Room agents, a Building agent has one or several BuildingEntry agents. The global environment is characterized by Building agents, but also by one or several AreaEntry agents and by PedestrianPath agents representing the path that Individual agents can follow to move. . The Individual agent‚Äôs behavior is driven by their agenda attribute that associates to some date an Activity. An Activity is mainly a way to choose the spatial unit(s) in which the Individual agents have to be located or to move to at each simulation step. the last type of spatial entity are the UnitCell agents, which allow to take into account the environmental contamination . We have also defined additional specific Activity species to represent the main classical kinds of Activity: ActivityLeaveArea, ActivityGotoOffice, ActivityGotoRestaurant, ActivityGotoRoom. Of course, customs activities can also be created from the generic Activity species. . Process overview and scheduling . The model simulates the spread of the COVID-19 in a population at the individual level. The dynamics of the model can be summarized by two main dynamics: the epidemic dynamics and the activities of the Individual agents, following their agenda. . There are three different pathways of infection for Individual agents: either through Individual-to-Individual transmission, through persistence of the virus in the air, and through persistence of the virus on the physical objects. When an infectious Individual is located in a building, it can release a virus load on the unit cell it is located in, which can survive several hours. In addition, it can release a virus load in the room it is located in. Individuals who will come to this unit cell/room can thus become infected by the viral load present in the unit cell/room itself. As soon as an Individual is infected, its epidemic status will be described by a set of states and transitions (given probabilities taken from the up-to-date COVID-19 literature). . A simulation step starts by the evolution of the viral load in the unit cells and in the rooms (it decreases over time, before disappearing). Then the Individual agents behave. They first evaluate whether they are infected or infect other Individual agents or release virus load in their current unit cell/room. They then update their epidemic status (given the model detailed in the Sub-model Section) and their individual behavior related to mask wearing. Finally they execute their activities: they find the activity corresponding to the current time, and act in accordance. . Design Concepts . Basic principles . As far as the epidemiological dynamics is concerned, we rely on much scientific evidence that the disease could be represented by a SEIR model with an infectious state that can be presymptomatic, symptomatic or asymptomatic, with a certain degree of survivability of the virus in the environment and the possibility of people being infected by it. . The Individual agents‚Äô behavior is described using an activity-based approach: people have a set of activities associated with some corresponding time. This agenda makes the agents move from room to room (and eventually from building to building) and enter/leave the simulated area. . Interaction . Individual agents can infect other Individual agents directly through contact or indirectly through room and/or unit cell contamination: Infectious Individual agents can release a viral load in a unit cell and/or in a room agent and, as the virus can survive in the Building for a period of time, a unit cell and a room agent with a viral load will possibly infect the Individual agents located in it, following the assumption that contaminated surfaces such as doorknobs, tables, on which the virus can survive, are possible transmission pathways. . Details . Initialization . In order to keep the model as generic as possible, many parameters and initial values are stored in case-dependent external files. Two parameter files for epidemiological model and activity types links to building types are stored in a general purpose parameter folder. In order to use them in a custom version of COMOKIT, users should either redefine them or give the path to this folder relative to the new project. . Submodels . Epidemiological submodel . The epidemiological model is based on the SEIR model with an infectious state that can be presymptomatic, symptomatic or asymptomatic. Once the infectious period is over, Individual agents reach the Removed (R) state, representing the fact that the Individual has been infected, but is not infectious anymore. To represent deaths and recoveries, we decided to consider the current clinical status of the Individual agent: when it becomes symptomatic, an Individual will first need hospitalisation, and then (with a given probability) ICU. If the Individual agent is not being taken to a Hospital before the end of its expected period needing ICU, it will be considered as dead due to lack of treatment. In the case, it went to ICU when needed, it has a probability to recover. . The various (incubation‚Ä¶) periods and probabilities are Individualdependent and are randomly picked following various distributions. . . Description of the COMOKIT Macro model . We describe in this section the COMOKIT Macro model (version 2.0) using the standard O.D.D. protocol (the full description is also available). . Overview . Purpose . This model aims at simulating and comparing the application of COVID-19 spread mitigation policies at the scale of a big city or a country, the transmission of the disease being modeled at the scale of individual groups. Its purpose is to support decision makers and researchers in answering questions such as: Is the containment of a neighborhood more effective than that of an entire city? Does closing schools decrease the transmission peaks ? How does wearing masks impact the dynamics of the epidemic ? How long should a lockdown ideally last ? What proportion of the population should be allowed to undertake activities during a lockdown ? . One case study is provided with the model: the province (R√©gion) of Alpes-Maritimes in France. . Entities, state variables, and scales . Scales . The model has been designed to be adapted to any scale and in particular to city and country scales. The spatial units considered can represent an individual building, a neighborhood, a city, a region or even a country. . The simulations are not launched from a specific starting date, but rather from the introduction of the first infected cases in the population and will run until the end of the epidemic. The simulation step is by default set to 1 hour (but it is possible to take into account a less fine time step). As a consequence, movements from one activity place to another one are not simulated: groups of individuals are always located in an activity place. The underlying assumption is that no infection cannot occur during the travel time. . Entities . The model is designed to simulate the COVID-19 spread at the individual group scale. As a consequence, the core entity of the model is Group type of agents (or species): it represents a homogenous group of individual inhabitants that share similar characteristics with respect to the disease and governance response (incubation time, likelihood of hospitalization, likelihood of wearing a mask, likelihood of following restrictions‚Ä¶). A Group allows to know for each epidemiological status (susceptible, latent, pre-symptomatic, symptomatic, asymptomatic‚Ä¶), the number of individuals in the group with that status. To take into account the temporal evolution of the disease, the number of individuals in each status is not kept as a simple integer, but as a table, each cell of the table corresponds to one day, e.g. the integer in the second cell of the table corresponding to the latent status corresponds to the number of individuals in the latent status for 2 days. . Another important type of agent is Compartment, which is an encapsulation of a Group, which represents a group of inhabitants living in the same Spatial_unit and which shares the same agenda. The agenda describes, depending on the day of the week and the time of day, the number of people in the Compartment who will go to each Spatial_unit, to perform this or that type of activity in the different types of buildings. . Spatial_unit agents are spatial entities where the individuals can perform an activity. They are characterized by a set of Compartment agents representing the inhabitants of the area, by a set of building types and for each one by the area that it represents, and finally by a set of Group agents representing at the current time step the individuals that are located in the area for each type of building. . As our main goal is to simulate and compare the application of various mitigation and control policies, a specific focus is made on policies that modify the population behavior to reduce contacts and thus infection between people. As a consequence, the possibility for individuals of Compartment agents to carry out an activity in a given Spatial_unit and building type is constrained by the allowance of the Authority agent. This agent manages the various Policy that are adopted. When a Compartment agent asks it for authorization to perform an activity, the Authority asks all the policies it has adopted the allowance rate for the Compartment to do the given Activity. Examples of Policy include total containment, close the schools, close the work spaces‚Ä¶ These policies can be limited to a given area (using SpatialPolicy) or be more or less tolerant (e.g. containment can be for every body or for every body but some people, or some rate of the population, using PartialPolicy). . Process overview and scheduling . The dynamics of the model can thus be summarized by four main dynamics: the epidemic status updating of Compartment agents, the activities of the Compartment agents, the disease spreading, and the dynamics of policy adoption and application. . At the beginning of each new day, the epidemiological status of the group of each Compartment agent is updated. More precisely, for each epidemiological status, the number of individuals in each cell will be transferred to the next cell, corresponding to the next day. For the number of individuals in the last cell, transition rates to new statuses are used to know to which status these individuals will be transferred. . The most important dynamic, which is triggered at each simulation step, is the movement of individuals to conduct their activity. More precisely, each Compartment agent will calculate according to its agenda and current policies the number of individuals who will go to each Spatial_unit agent to conduct their activity in a given type of building. This number will then be managed as a group agent located in the target Spatial_unit agent and linked to a building type. The set of these groups will then allow to calculate the number of susceptible individuals that will be infected for each Compartment agent. . Finally, the Authority agent checks its current Policy and tries to apply it (e.g. executing a test campaign for example). . Design Concepts . Basic principles . As far as the epidemiological dynamics is concerned, we rely on much scientific evidence that the disease could be represented by a SEIR model with an infectious state that can be presymptomatic, symptomatic or asymptomatic, with a certain degree of survivability of the virus in the environment and the possibility of people being infected by it. . The individual group agents‚Äô behavior is described using an activity-based approach: people have a set of activities associated with some day hours. This agenda makes the individuals in the group jump between spatial units and types of buildings. . Interaction . The first type of interaction is the dynamics of contamination. Group agents in the same spatial unit and in the same types of buildings will contaminate each other. Interactions between Compartment agents and the Authority agents occur in both directions: Compartment agents ask the Authority‚Äôs authorization to execute a given Activity and reversely the Authority agents can apply a Policy to check the epidemic state of the individuals inside the Compartment agents. . Details . Initialization . In order to keep the model as generic as possible, many parameters and initial values are stored in case-dependent external files. A parameter file for the epidemiological model is stored in a general purpose parameter folder. In order to use it in a custom version of COMOKIT, users should either redefine them or give the path to this folder relative to the new project (for example, see Template Projects in COMOKIT). . Submodels . Epidemiological submodel . The epidemiological model is based on the SEIR model with an infectious state that can be presymptomatic, symptomatic or asymptomatic. Once the infectious period is over, Individual agents reach the Removed (R) state, representing the fact that the Individual has been infected, but is not infectious anymore. To represent deaths and recoveries, we decided to consider the current clinical status of the Individual agent: when it becomes symptomatic, an Individual will first need hospitalisation, and then (with a given probability) ICU. If the Individual agent is not being taken to a Hospital before the end of its expected period needing ICU, it will be considered as dead due to lack of treatment. In the case, it went to ICU when needed, it has a probability to recover. . The various (incubation‚Ä¶) periods and probabilities are Individualdependent and are randomly picked following various distributions. . Institutions . The Authority agent is in charge of applying one or several mitigation policies on the whole case study or on some local spaces. The policies can impact the simulation in two ways. Every step, the Authority can proactively perform some actions encoded in the policy, e.g. conduct a given number of tests on the population. On the other hand, each Individual agent asks the Authority whether it is allowed to execute a given Activity. In this case, the Authority will make its choice based on what is allowed by its policies that are currently applied. .",
    "url": "https://comokit.org/docs/odd",
    "relUrl": "/odd"
  }
  ,"3": {
    "title": "Getting Started",
    "content": "Getting Started . How to run COMOKIT locally . . Install COMOKIT | Bundled install (easy) Manual install (harder) | | How to run | . Install COMOKIT . You can install and run COMOKIT by two ways: . you can download and run the All-In-One archive, | you can manually install GAMA (1.8.1 or above) and import COMOKIT inside. | . We do recommend you to pick the first option (especially if you are a beginner). . Bundled install (easy) . First you should download the All-In-One archive for your system (Windows, MacOS or Linux). | Unzip it on your computer (the place is not important). | Open the extracted folder. | Start the GAMA Application. | . Here you are, you have an instance of COMOKIT running on your computer. . . Manual install (harder) . If you want to install and run the model yourself on your computer you should: . First, download and extract the GAMA 1.8.1 version or above (if you do not know which version to take, choose the one with JDK). If you need more information about how to install GAMA, check the installation page | Second, download the model on GitHub (click here to download it automatically) | Extract that ZIP file somewhere on your computer and import it on GAMA as a GAMA project (see pictures below). | . . . How to run . Launch your installed GAMA application | Select an experiment to run. Bellow we selected the COMOKIT/Experiments/Lockdown/Realistic Lockdown Durations.gaml experiment. | . . Click on the Early containment green button to run this experiment. | Select which city to run the experiment on. | . . GAMA will take a few seconds (depending on your computer power) to create the various simulations and displays. You should finally observe the following picture and the simulations run automatically. | . .",
    "url": "https://comokit.org/docs/gettingStarted",
    "relUrl": "/gettingStarted"
  }
  ,"4": {
    "title": "Headless execution",
    "content": "Headless execution . COMOKIT has also been made to explore his model and run in headless mode on server or HPC. . . Introduction | Getting started Before installation | Installation | Setting up your server | | How to use: Generate XML | Example usage | Advanced usage | | Launch headless | . Introduction . COMOKIT has also been developped to be run in headless mode. To do so, it is using the GAMA Headless feature which allows to run GAMA on a server without graphical interfaces. . To simplify this usage, we developped some tools allowing this configuration. . Getting started . Before installation . Before installing COMOKIT, be sure to have on your server: . 64 bits server $ lscpu | head -n 2 Architecture: x86_64 CPU op-mode(s): 32-bit, 64-bit . | Python 3 $ python3 -V Python 3.8.2 . | pip3 $ pip3 -V pip 20.1.1 from /home/roiarthurb/.local/lib/python3.8/site-packages/pip (python 3.8) . | (if you do not use GAMA with JDK) JDK 8 $ java -version openjdk version &quot;1.8.0_242&quot; OpenJDK Runtime Environment (build 1.8.0_242-b08) OpenJDK 64-Bit Server VM (build 25.242-b08, mixed mode) . | . Installation . To install COMOKIT Headless on your server you can either download a COMOKIT release and the headless tools or directly download the HPC archive (which packages GAMA with an embedeed JDK, COMOKIT for Linux and the needed tools). . If you don‚Äôt use a version of GAMA provided with one of our release, be sure to use GAMA 1.8.1 version (or above) and a JAVA Developpement Kit (JDK) 8. . Setting up your server . To have your tooly-scripts ready to run, be sure to install all the required python‚Äôs modules like so . $ pip3 install -r /path/to/COMOKIT-HPC/pre-processing/required.txt . How to use: . Generate XML . GAMA Headless mode needs an XML configuration file in order to run GAMA. The HPC toolkit allows to generate it automatically. . move to the folder pre-processing $ cd /path-to/COMOKIT-HPC/pre-processing | run generateMultipleXML.py with arguments to create the XML file and run GAMA. Basic usage is described below. | . $ python3 generateMultipleXML.py -h usage: $ python3 generateMultipleXML.py [options] -f INT -xml &lt;experiment name&gt; /path/to/file.gaml /path/to/file.xml optional arguments: -h, --help show this help message and exit -r INT, --replication INT Number of replication for each paramater space (default: 1) -s INT, --split INT Split XML file every S replications (default: 1) -o STR, --output STR Relative path from GAML file to folder where save output CSV (default: &quot;../../batch_output&quot; =&gt; /path/to/COMOKIT-Model/COMOKIT/batch_output) -u STR, --until STR Stop condition for the simulations (default: &quot;world.sim_stop()&quot; -S INT, --seed INT Starting value for seeding simulation (default: 0) -f INT, --final INT Final step for simulations -xml &lt;experiment name&gt; /path/to/file.gaml /path/to/file.xml Classical xml arguments . Example usage . COMOKIT provide you an XML example to launch the headless. . . It has been generated with the command below . $ cd /path/to/COMOKIT-Model/COMOKIT/Utilities $ python3 ~/path/to/COMOKIT-HPC/pre-processing/generateMultipleXML.py -xml &quot;SensitivityHeadless&quot; ../Experiments/Sensitivity Analysis/Sensitivity Analysis.gaml ./testHeadless.xml -f 20 Total number of parameters detected : 0 Total number of possible combinaison : 1 Replications : 1 Number of exp in file : -1 Final step : 20 === Start generating XML file : (every dot will be a simulation with all the replications created) . === Start saving XML file === Done ;) . In the command above, we said that we want to generate an XML file with the experiment SensitivityHeadless from the file Experiments/Sensitivity Analysis/Sensitivity Analysis.gaml and save it at ./testHeadless.xml. We also precised that the simulation should stop after 20 steps (if not stopped before). . This command is the smallest command possible, but we can go way deeper in the customization as we will see after. . The generated XML looks like this : . &lt;Experiment_plan&gt; &lt;Simulation experiment=&quot;SensitivityHeadless&quot; finalStep=&quot;20&quot; id=&quot;0&quot; seed=&quot;0&quot; sourcePath=&quot;../Experiments/Sensitivity Analysis/Sensitivity Analysis.gaml&quot; until=&quot;world.sim_stop()&quot;&gt; &lt;Parameters&gt; &lt;Parameter type=&quot;INT&quot; value=&quot;0&quot; var=&quot;idSimulation&quot;/&gt; &lt;Parameter type=&quot;STRING&quot; value=&quot;../batch_output/&quot; var=&quot;result_folder&quot;/&gt; &lt;/Parameters&gt; &lt;Outputs/&gt; &lt;/Simulation&gt; &lt;/Experiment_plan&gt; . Advanced usage . As you can see, our previous command only generated an Experiment Plan with a single Simulation. This example is the simpliest usage to give you a try runnable on your computer, but it doesn‚Äôt fit if you want to do a full exploration on a server. . To do so you can change the script parameters to generate a bigger exploration plan like this : . $ python3 ~/path/to/COMOKIT-HPC/pre-processing/generateMultipleXML.py -xml &quot;SensitivityHeadless&quot; ../Experiments/Sensitivity Analysis/Sensitivity Analysis.gaml ./testHeadless.xml -o ../results/ -r 1000 -s 36 -f 5000 Total number of parameters detected : 0 Total number of possible combinaison : 1 Replications : 1000 Number of exp in file : 36 Final step : 5000 === Start generating XML file : (every dot will be a simulation with all the replications createdtart saving XML file === Done ;) $ # Check generated XML files $ ls -l *.xml | wc -l 29 $ ls -lh *.xml | head -rw-r--r-- 1 roiarthurb roiarthurb 15K 26 mai 10:31 testHeadless-0.xml -rw-r--r-- 1 roiarthurb roiarthurb 16K 26 mai 10:31 testHeadless-10.xml -rw-r--r-- 1 roiarthurb roiarthurb 16K 26 mai 10:31 testHeadless-11.xml -rw-r--r-- 1 roiarthurb roiarthurb 16K 26 mai 10:31 testHeadless-12.xml -rw-r--r-- 1 roiarthurb roiarthurb 16K 26 mai 10:31 testHeadless-13.xml -rw-r--r-- 1 roiarthurb roiarthurb 16K 26 mai 10:31 testHeadless-14.xml -rw-r--r-- 1 roiarthurb roiarthurb 16K 26 mai 10:31 testHeadless-15.xml . So, with this advances command we created an Experiment Plan with 1000 simulations (1 combinaison times 1000 replications, done with the argument -r) splited in several files so every file contain 36 Simulation (-s). . Note that if you split your XML file, it will automatically change the name to have a unique id on every file. . Launch headless . Once you have your XML files, you‚Äôre ready to launch the GAMA headless with a simple command : . $ bash /path/to/GAMA/headless/gama-headless.sh ./testHeadless-0.xml ./output . The 2 script‚Äôs parameter (./output) is never use within COMOKIT but is requested by the GAMA Headless, so don‚Äôt mind about this folder content. All the CSV raw data are saved in the location precised while you‚Äôve been creating your XML files. . If you need more explainations about the headless, please refer to the official GAMA documentation. .",
    "url": "https://comokit.org/docs/headless",
    "relUrl": "/headless"
  }
  ,"5": {
    "title": "Official COMOKIT extensions",
    "content": "Official COMOKIT extensions . Here‚Äôs the list of all official extensions of the COMOKIT project .",
    "url": "https://comokit.org/docs/officialExtensions",
    "relUrl": "/officialExtensions"
  }
  ,"6": {
    "title": "Home",
    "content": "COMOKIT Documentation . A GAMA model on the assessment and comparisons of intervention policies against the CoVid19 pandemics . . . COMOKIT is a complex integrated modeling kit that combines several specialized sub-models (transmission, activities, epidemiology, etc.) in order to study the diffusion of infectious diseases at different scales: from the building scale to the world scale. COMOKIT proposes 3 models, each one adapted to a study scale. Each of these models is fully described in the form of a downloadable O.D.D document: MICRO, MESO and MACRO. These descriptions do not concern the operational aspects of installation, initialization, parameterization and extension of COMOKIT, which are covered by this online documentation. . Getting started covers downloading, installing and launching the all-in-one version of COMOKIT (or importing COMOKIT into an existing GAMA installation) and executing predefined experiments. | Headless execution explains how to run experiments without graphical outputs, for example on an HPC infrastructure. | Parameterizing simulations explains how to modify the input parameters used by the different sub-models. | Extending COMOKIT covers how to prepare datasets so that COMOKIT can be applied to new case studies, and how to define new experiments | . Please also refer to the official GAMA documentation for all matters related to the operation of the platform. . Citing COMOKIT . If you use COMOKIT in your research and want to cite it (in a paper, presentation, whatever), please use this reference: . Gaudou, B., Huynh, N. D., Philippon, D., Brugi√®re, A., Chapuis, K., Taillandier, P., Larmande, P., and Drogoul, A. (2020) COMOKIT: a modeling kit to understand, analyze and compare the impacts of mitigation policies against the COVID-19 epidemic at the scale of a city . Front. Public Health., [doi:10.3389/fpubh.2020.563247] . or you can choose to cite the website instead: . COMOKIT website, https://comokit.org . A complete list of references (papers and PhD theses on or using COMOKIT) is available on the press page. .",
    "url": "https://comokit.org/docs/",
    "relUrl": "/"
  }
  ,"7": {
    "title": "Parameterizing simulations",
    "content": "Parameterizing simulations . . Epidemiology Modifying the parameters in Model/Parameters.gaml Environmental contamination dynamics | Human to human transmission dynamics | Hospitalisation and severity | Testing and mask wearing | | Modifying the parameters in the CSV file | | Synthetic population generation Built-in generator parameterization | File based data harmonization | | Synthetic agenda Synthetic agenda configuration file | Activity file | | To link building types and activities Building types | Building file | | Redefining parameter values Calibration of the transmission rate value (Œ≤) | | . Epidemiology . There are two different ways to set up epidemiological parameters in COMOKIT: . by modifying the parameters variables in Model/Parameters.gaml (setting the variable load_epidemiological_parameter_from_file to false), | by giving the path of a CSV file containing different values for the parameters (setting the variable epidemiological_parameters to the path of the file). | . In both cases, a map of parameters (map_epidemiological_parameters, defined in Model/Global.gaml) will be generated, using different ages (int) as key of the map, and the value of the parameters. . Modifying the parameters in Model/Parameters.gaml . The first method is easier, as the parameters are already defined and just their values have to be changed. However, it lacks flexibility and heterogeneity compared to the second method. . Note that this method is not the one used by default in COMOKIT, but the second one, providing more realistic values. . Environmental contamination dynamics . The list of the epidemiological parameters presented in Model/Parameters.gaml for environmental contamination dynamics is: . allow_transmission_building, allowing environmental contamination dynamics, set by default to true, | basic_viral_decrease, the decrease over time of the viral load in the environment, set by default to 0.33, | basic_viral_release, the release over time of the viral load in the environment by one infected Individual, set by default to 3.0, | successful_contact_rate_building, the successful contact rate for environment to human transmission derivated from the R0 and the mean infectious period, set by default to 2.5 * 1/(14.69973*nb_step_for_one_day), | . Human to human transmission dynamics . The list of the epidemiological parameters presented in Model/Parameters.gaml for human to human transmission dynamics is: . allow_transmission_human, allowing human to human transmission dynamics, set by default to true, | init_all_ages_factor_contact_rate_asymptomatic, the non-age-dependent factor of the successful contact rate for asymptomatic/presymptomatic human to human transmission, set by default to 0.55, | init_all_ages_proportion_asymptomatic, the non-age-dependent proportion of asymptomatic individuals, set by default to 0.3, | init_all_ages_successful_contact_rate_human, the non-age-dependent successful contact rate for human to human transmission derivated from the R0 and the mean infectious period, set by default to 2.5 * 1/(14.69973), -reduction_coeff_all_buildings_individuals, the reduction of the contact rate for individuals belonging to different households but living in the same building, set by default to 0.05, | reduction_coeff_all_buildings_inhabitants, the reduction of the contact rate for individuals belonging to different households but living in the same building, set by default to 0.01, | init_all_ages_distribution_type_incubation_period_symptomatic, the non-age-dependent distribution for the incubation period of symptomatic Individuals, set by default to Lognormal, | init_all_ages_parameter_1_incubation_period_symptomatic, the first parameter for the non-age-dependent distribution for the incubation period of symptomatic Individuals, set by default to 1.57, | init_all_ages_parameter_2_incubation_period_symptomatic, the second parameter for the non-age-dependent distribution for the incubation period of symptomatic Individuals, set by default to 0.65, | init_all_ages_distribution_type_incubation_period_asymptomatic, the non-age-dependent distribution for the incubation period of asymptomatic Individuals, set by default to Lognormal, | init_all_ages_parameter_1_incubation_period_asymptomatic, the first parameter for the non-age-dependent distribution for the incubation period of asymptomatic Individuals, set by default to 1.57, | init_all_ages_parameter_2_incubation_period_asymptomatic, the second parameter for the non-age-dependent distribution for the incubation period of asymptomatic Individuals, set by default to 0.65, | init_all_ages_distribution_type_serial_interval, the non-age-dependent distribution for the serial interval, set by default to Normal, | init_all_ages_parameter_1_serial_interval, the first parameter for the non-age-dependent distribution for the incubation period of asymptomatic Individuals, set by default to 3.96, | init_all_ages_parameter_2_serial_interval, the second parameter for the non-age-dependent distribution for the incubation period of asymptomatic Individuals, set by default to 3.75, | init_all_ages_distribution_type_infectious_period_symptomatic, the non-age-dependent distribution for the infectious period of symptomatic Individuals, set by default to Lognormal, | init_all_ages_parameter_1_infectious_period_symptomatic, the first parameter for the non-age-dependent distribution for the infectious period of symptomatic Individuals, set by default to 3.034953, | init_all_ages_parameter_2_infectious_period_symptomatic, the second parameter for the non-age-dependent distribution for the infectious period of symptomatic Individuals, set by default to 0.34, | init_all_ages_distribution_type_infectious_period_asymptomatic, the non-age-dependent distribution for the infectious period of asymptomatic Individuals, set by default to Lognormal, | init_all_ages_parameter_1_infectious_period_asymptomatic, the first parameter for the non-age-dependent distribution for the infectious period of asymptomatic Individuals, set by default to 3.034953, | init_all_ages_parameter_2_infectious_period_asymptomatic, the second parameter for the non-age-dependent distribution for the infectious period of asymptomatic Individuals, set by default to 0.34. | . Hospitalisation and severity . The list of the hospitalisation and severity related parameters presented in Model/Parameters.gaml for human to human transmission dynamics is: . init_all_ages_proportion_hospitalisation, the non-age-dependent proportion of symptomatic Individuals that will need hospitalisation, set by default to 0.2, | init_all_ages_distribution_type_onset_to_hospitalisation, the non-age-dependent distribution of the time between symptom onset and hospital admission for symptomatic Individuals, set by default to Lognormal, | init_all_ages_parameter_1_onset_to_hospitalisation, the first parameter of the non-age-dependent distribution of the time between symptom onset and hospital admission for symptomatic Individuals, set by default to 3.034953, | init_all_ages_parameter_2_onset_to_hospitalisation, the second parameter of the non-age-dependent distribution of the time between symptom onset and hospital admission for symptomatic Individuals, set by default to 0.34, | init_all_ages_proportion_icu, the non-age-dependent proportion of hospitalised Individuals that will need to go in ICU, set by default to 0.1, | init_all_ages_distribution_type_hospitalisation_to_ICU, the non-age-dependent distribution of the time between hospitalisation and ICU admission for hospitalised Individuals, set by default to Lognormal, | init_all_ages_parameter_1_hospitalisation_to_ICU, the first parameter of the non-age-dependent distribution of the time between hospitalisation and ICU admission for hospitalised Individuals, set by default to 3.034953, | init_all_ages_parameter_2_hospitalisation_to_ICU, the second parameter of the non-age-dependent distribution of the time between hospitalisation and ICU admission for hospitalised Individuals, set by default to 0.34, | init_all_ages_distribution_type_stay_ICU, the non-age-dependent distribution of the duration of stay in ICU for Individuals, set by default to Lognormal, | init_all_ages_parameter_1_stay_ICU, the first parameter of the non-age-dependent distribution of the duration of stay in ICU for Individuals, set by default to 3.034953, | init_all_ages_parameter_2_stay_ICU, the second parameter of the non-age-dependent distribution of the duration of stay in ICU for Individuals, set by default to 0.34, | init_all_ages_proportion_dead_symptomatic, the non-age-dependent proportion of symptomatic individuals that will die even if treated, set by default to 0.01, | . Testing and mask wearing . The list of the test and mask related parameters presented in Model/Parameters.gaml for human to human transmission dynamics is: . init_all_ages_probability_true_negative, the non-age-dependent probability of being tested positive when infected, set by default to 0.92, | init_all_ages_probability_true_positive, the non-age-dependent probability of being tested positive when infected, set by default to 0.89, | init_all_ages_proportion_wearing_mask, the non-age-dependent proportion of Individuals wearing mask, set by default to 0.0, | init_all_ages_factor_contact_rate_wearing_mask, the non-age-dependent factor of successful transmission for an infectious individual wearing a mask, set by default to 0.5, | . Modifying the parameters in the CSV file . In the CSV file, it is possible to define multiple values for the same parameter taking into account the age of the individuals. In addition, it is possible to not just provide a fixed value, but also a distribution in order to generate different values for each Individual (among Weibull, Gamma, Uniform, Normal and Lognormal distributions). In the case of providing a CSV file to set the parameters, it is still possible to force parameter values (for one experiment, for instance) by using the force_parameters map, expecting the string ID of a parameters (defined in Model/Constants.gaml) and a given value. Particular attention should be given to the names of the parameters provided in the CSV file, as they must be exactly the same as the string ID of the parameters. In order to define a parameter as age-depedent, multiple rows in the CSV file must begin with the same parameter string ID, and different age values. The age category will be defined with the lower bound equals to the value of the column age for the given row, and the upper bound the value of the column age for the next row with the same parameter string ID (if there are none, there will be no upper bound, including every Individuals having at least an age equals to the lower bound). The column detail in the CSV is expecting either the string FIXED (for a parameter not following a distribution), or one of the string ID of the distributions (Weibull, Gamma, Normal, Lognormal, Uniform). Parameter_1 is expecting the value of the parameter (if FIXED) or the first parameter of the gama function for the given distribution. Parameter_2 is used only if Detail is a distribution, and provides the second parameter of the gama function for the given distribution. . All the parameters can have different values for given age categories but: . Transmission_human (corresponding to allow_transmission_human in Model/Parameters.gaml), allowing human to human transmission dynamics, | Transmission_building (corresponding to allow_transmission_building in Model/Parameters.gaml), allowing environmental contamination dynamics, | Successful_contact_rate_building (corresponding to successful_contact_rate_building in Model/Parameters.gaml), the transmission building to human occuring due to environmental contamination, | Basic_viral_decrease (corresponding to basic_viral_decrease in Model/Parameters.gaml), the decrease over time in viral load in the environment, can‚Äôt be age-dependent for obvious reasons. | . The default values for the different parameters are stored in the file Parameters/Epidemiological Parameters.csv. . Synthetic population generation . As mentioned in its ODD description, COMOKIT proposes two ways to generate a synthetic population of agents: either from a csv file where each line corresponds to an individual or using a built-in generator. This paragraph details how both can be parameterized. The following sub-section shows how to customize the built-in generator and how to harmonize file based synthetic records . Built-in generator parameterization . The default generator provided with COMOKIT makes use of a configuration file in order to define key variables of the algorithm. In order to define them according to a case study, it should be created and placed in the case study folder, and named Population parameter.csv, with a first column corresponding to the parameter name and a second column the provided value. The list below details all the parameters that can be defined in this file with their default value when they are omitted: . male_ratio : the probability to be a male (1 - male_ratio gives the probability to be a female). Default is 21/41 | proba_active_family : the probability to create a two or more persons household (1 - proba_active_family being the probability to create a lone individual household). Default is 0.95 | number_children_mean : the mean (expected value) number of children per household. Default is 2.0 | number_children_std : the standard deviation (variance) to determine the number of children per household. Default is 0.5 | number_children_max : the maximum number of children per household. Default is 3 | proba_grandfather : the probability to include the grandfather in the household. Default is 0.2 | proba_grandmother : the probability to include the grandmother in the household. Default is 0.3 | retirement_age : the age threshold for retirement. Default is 55 | max_age : the maximum age an agent can have at initialization. Default is 100 | nb_friends_mean : the mean (expected value of a Gaussian) number of friends per individual agent. Default is 5.0 | nb_friends_std : the standard deviation (variance of a Gaussian) to determine the number of friends per individual. Default is 3.0 | nb_classmates_mean : mean number of classmates with which an Individual will have close contact. Default is 10.0 | nb_classmates_std : stand deviation of the number of classmates with which an Individual will have close contact. Default is 5.0 | nb_work_colleagues_mean mean number of work colleagures with which an Individual will have close contact. Default is 5.0 | nb_work_colleagues_std : stand deviation of the number of work colleagures with which an Individual will have close contact. Default is 3.0 | proba_work_at_home : the probability to do remote work. Default is 0.05 | proba_unemployed_M : the probability for a male individual agent to be unemployed. Default is 0.03 | proba_unemployed_F : the probability for a female individual agent to be unemployed. Default is 0.03 | . File based data harmonization . In order to use microdata to initialize the synthetic population of agents in COMOKIT, users should provide attribute names and values for age, sex, is_unemployed and household_id Individual attributes. In Version 1.0.1 of COMOKIT, these information must be provided directly in the global section in GAML. Below are listed the variables that must be overwritten to harmonize the micro-data with COMOKIT: . age : assigns the name of micro-data age variable to age_var (i.e. age_var &lt;- &quot;age_var_name_in_csv&quot;) and the mapping of values in age_map (e.g. age_map &lt;- [&quot;0-14&quot;::[0,14],&quot;15-45&quot;::[15,45],&quot;46+&quot;::[46,120]]) | sex : assigns the name of micro-data sex variable to sex_var (i.e. sex_var &lt;- &quot;sex_var_name_in_csv&quot;) and the mapping of values in sex_map (e.g. sex_map &lt;- [&quot;man&quot;::0,&quot;woman&quot;::1]) | is_unemployed : assigns the name of micro-data employement status to unemployed_var (i.e. unemployed_var &lt;- &quot;employement_var_name_in_csv&quot;) and the mapping of values in unemployed_map (e.g. unemployed_map &lt;- [&quot;active&quot;::false,&quot;inactive&quot;::true,&quot;unemployed&quot;::true]) | household_id : assigns the name of micro-data household identifier to householdID (i.e. householdID &lt;- &quot;household_id_name_in_csv&quot;) | . Each one has a built-in method to get a default value when data is missing or missencoding. The age will be uniformly drawn in [0,max_age] (with max_age being a variable of COMOKIT that can be found in Parameters.gaml), Gender chosen according to a probability of 0.512 (ratio of 105 males for 100 females) and an unemployed rate of 0.03 (i.e. same rate as in the built-in generator). When no household identifier is provided in the micro-data, COMOKIT builds households like the built-in generator does, except it selects relevant individuals from the sample rather than creating them. . Synthetic agenda . The synthetic agenda generator provided with COMOKIT makes use of two files: a configuration file and an activity file. . Synthetic agenda configuration file . The configuration file is used to define the key variables of the algorithm. In order to define them according to a case study, it should be created and placed in the case study folder, and named Agenda parameter.csv, with a first column corresponding to the parameter name and a second column the provided value. The list below details all the parameters that can be defined in this file with their default value when they are omitted: . non_working_days : List of non working days (1: Monday, 7: Sunday). Default is [7] | work_hours_begin_min : the minimal value for the beginning working hour (between 0 and 23). Default is 6 | work_hours_begin_max : the maximal value for the beginning working hour (between 0 and 23). Default is 10 | work_hours_end_min : the minimal value for the ending working hour (between 0 and 23). Default is 15 | work_hours_end_max : the maximal value for the ending working hour (between 0 and 23). Default is 18 | school_hours_begin_min : the minimal value for the beginning school hour (between 0 and 23). Default is 7 | school_hours_begin_max : the maximal value for the beginning school hour (between 0 and 23). Default is 9 | school_hours_end_min : the minimal value for the ending school hour (between 0 and 23). Default is 15 | school_hours_end_max : the maximal value for the ending school hour (between 0 and 23). Default is 18 | first_act_hour_non_working_min : For non working day (or people who are not working), minimal hour for the beginning of the first activity (between 0 and 23). Default is 7 | first_act_hour_non_working_min : For non working day (or people who are not working), maximal hour for the beginning of the first activity (between 0 and 23). Default is 10 | lunch_hours_min : the minimal value for the beginning of the lunch time (between 0 and 23). Default is 11 | lunch_hours_max : the maximal value for the beginning of the lunch time (between 0 and 23). Default is 13 | max_duration_lunch : the maximal duration (in hours) of the lunch time. Default is 2 | max_duration_default : the maximal duration (in hours) of other activities. Default is 3 | min_age_for_evening_act : the minimal age of individual to have an activity after school. Default is 13 | nb_activity_fellows_mean : the mean number of fellows per activity. Default is 3.0 | nb_activity_fellows_std : the standard deviation of the number of fellows per activity. Default is 2.0 | max_num_activity_for_non_working_day : the maximal number of activities for non working day. Default is 4 | max_num_activity_for_unemployed : the maximal number of activities per day for unemployed individual. Default is 3 | max_num_activity_for_old_people : the maximal number of activities per day for retired individual. Default is 3 | proba_activity_evening : the probability for people to have an activity after work. Default is 0.7 | proba_lunch_outside_workplace : the probability to have lunch outside the working place (home or restaurant). Default is 0.5 | proba_lunch_at_home : if lunch taken outside the working place, the probability of having lunch at home. Default is 0.5 | proba_work_outside : the probabilty for an individual to work outside the considered area. Default is 0.0 | proba_go_outside : the probabilty for an individual to do an activity outside the considered area. Default is 0.0 | building_neighbors_dist : the maximal distance (in meter) of the considered neigbhorhood for the ‚Äúvisit to neighbors‚Äù activity. Default is 500.0 | . Activity file . The activity file is used to define, according to the Individual‚Äôs age and the sex category, the weights of the different types of activity (the higher the weight, the higher the chance to carried out this activity). In order to define it according to a case study, it should be created and placed in the case study folder, and named Activity type weights.csv.The table below shows an example of file . Age min Age max sex visiting neighbor visiting friend eating shopping leisure outside activity sport other activity . 0 | 10 | 0 | 1.0 | 1.0 | 0.5 | 0.5 | 1.0 | 2.0 | 1.0 | 0.1 | . 0 | 10 | 1 | 1.0 | 1.0 | 0.5 | 0.5 | 1.0 | 2.0 | 1.0 | 0.1 | . 11 | 18 | 0 | 0.2 | 0.5 | 1.0 | 0.5 | 2.0 | 2.0 | 1.0 | 0.1 | . 11 | 18 | 1 | 0.2 | 0.5 | 1.0 | 0.5 | 2.0 | 2.0 | 1.0 | 0.1 | . 19 | 60 | 0 | 1.0 | 1.0 | 1.0 | 1.0 | 2.0 | 1.0 | 1.0 | 1.0 | . 19 | 60 | 1 | 1.0 | 1.0 | 1.0 | 2.0 | 2.0 | 1.0 | 1.0 | 1.0 | . 61 | 120 | 0 | 2.0 | 2.0 | 0.5 | 1.0 | 0.5 | 0.5 | 0.2 | 2.0 | . 61 | 120 | 1 | 2.0 | 2.0 | 0.5 | 2.0 | 0.5 | 0.5 | 0.1 | 2.0 | . To link building types and activities . Synthetic agenda of agents provides time use according to a sequence of activites to be carried out in buildings. In order to choose appropriate building corresponding to their activities, it is necessary to determine case study related building types and to attached these types to an activity. . Building types . COMOKIT provides built-in types of buildings, most of which have been taken from the OSM nomenclature. They are stored in the Paramaeters/Building type per activity type.csv file, with first column standing for activity type, and following ones to corresponding building types. For example, default provided type of building for staying_at_home activity are: &quot; &quot; (empty string), yes, house, manor, apartments, caravan, hostel, home and Tent Shelter. For any missing type, i.e. case study buildings.shp file where home place type is not in the previous list, you may have to add in a new column the corresponding type name. Hence, COMOKIT will be able to link activity types to custom building types. . Building file . The building file is used to define the agent preferences for building types according to age and sex. The higher the weigths are the higher individual agent will tends to carried out activities within this particular type of building. For example, agents can perform a leisure activity in several types of buildings, including cinema, karaoke, coffeshops and many more defined in Building per type activity type.csv (see Activity to building section). In that respect, the weights attached to building type will determine the corresponding probability to carry out a leisure activity in a particular building. Any missing building type will be assigned a weight equal to 1.0. . As for the activity file, the building file should be created and placed in a case study folder, and named Building type weights.csv. The table below show a snippet example of a file content: . Age min Age max sex playground park cinema place_of_worship . 0 | 10 | 0 | 1.0 | 1.0 | 0.5 | 0.5 | . 0 | 10 | 1 | 1.0 | 1.0 | 0.5 | 0.5 | . 11 | 18 | 0 | 0.2 | 0.5 | 1.0 | 0.5 | . 11 | 18 | 1 | 0.2 | 0.5 | 1.0 | 0.5 | . 19 | 60 | 0 | 1.0 | 1.0 | 1.0 | 1.0 | . 19 | 60 | 1 | 1.0 | 1.0 | 1.0 | 2.0 | . 61 | 120 | 0 | 2.0 | 2.0 | 0.5 | 1.0 | . 61 | 120 | 1 | 2.0 | 2.0 | 0.5 | 2.0 | . Redefining parameter values . As a general advice, parameters in Parameters.gaml and variables (e.g. in Global.gaml) of COMOKIT should be redefined in user models: it is good practice to redefine them in a global section of a user created GAML file. For example, to redefine the number of infected and recovered individuals at the beginning of a simulation, open or create a new GAML file, import all required files from COMOKIT and assign new values as follow: . global { int num_infected_init &lt;- 10; int num_recovered_init &lt;- 500; } . As a general guideline, do not change the values of parameters directly in the COMOKIT code, but rather in your own model (that imports COMOKIT). This advice is not mandatory at all, and modifying your local version of COMOKIT is functional. However, for the sake of clarity, it is recommended to redefine the parameters/variables of interest for you, in a model specific user created file. . Calibration of the transmission rate value (Œ≤) . The parameter Œ≤, referred as Successful_contact_rate_human in the file Epidemiological Parameters.csv, which stands for the transmission rate over a day of Covid-19 in COMOKIT determines the probability of any infectious agent to infect a susceptible one during a contact. It is splited into Œ≤_1 and Œ≤_2 with indexes representing transmission rate for symptomatic and asymptomatic respectively (see Complete O.D.D). The parameter Factor_asymptomatic define the weight applied to Œ≤_1 in order to obtain Œ≤_2; meaning that we can focus on Œ≤ as an autonomous parameter (i.e. as it is Œ≤_1 from which Œ≤_2 is derived from). Its value can be calibrated to reproduce a given R0, using the BetaCalibration.gaml file. The process is twofold: first it is required to know the actual contact rate within your model and then, the second step makes it possible to elicit the best Œ≤ value to reproduce a given R0 factor, using an approximation of the contact rate produced in the first step. . The experiment batch_Contact_Tracking makes use of the No Containment.gaml model to summarize the contact pattern of agent: how many contacts per days of week and weekends, average and median values. The only required parameter is the duration_xp float variable that gives the length of one run in simulated time (default is one month). Values are estimated over replications of the model (no containment, unhindered outbreak), that can be changes (12 by default). Beside the number of contacts the experiment also estimates a Œ≤ (let‚Äôs call it Œ≤‚Äô) value based on average/median contact per step and a given R0: Œ≤‚Äô is equal to R0 divided by the length of the infectious period, divided by the number of contact per day. Those values are stored in a csv file COMOKIT/beta_output/Contact_and_Beta.csv and can be used to further calibrate Œ≤ . The experiment estimate_beta makes it possible to further refine the value of Œ≤ according to contact pattern within COMOKIT. In fact the first computed estimate of Œ≤ does not take into account the type of agents that are in contacts, although $ beta$ is only significant when an infectious agent meets a susceptible one. The dynamic of the model behind the calibration of Œ≤ is a very simplified setup with no explicit spatial representation and controled number of contact based on previously estimated value: agents might be in contact with any other agent, pretty much like in a compartement model, and elicit uniformaly a n number of agent to meet during one step of simulation. By default n will be the average number of contact per step computed using the batch_Contact_Tracking experiment. By the end of one simulation actual reproduction number (called Re) is computed as the mean of the number of infected agent by any infectious agent excluding those that do not spread the desease. The fitness of the calibration process is simply the euclidian distance between R0 and Re. .",
    "url": "https://comokit.org/docs/parameterize",
    "relUrl": "/parameterize"
  }
  ,"8": {
    "title": "Press",
    "content": "Press section . It‚Äôs about COMOKIT . . Scientific articles | General articles French | English | Italian | | Videos French | Vietnamese | | . Scientific articles . Drogoul, A., Taillandier, P., Gaudou, B., Choisy, M., Chapuis, K., Huynh, N. Q. , Nguyen, N. D., Philippon, D., Brugi√®re, A., and Larmande, P. (2020) Designing social simulation to (seriously) support decision-making: COMOKIT, an agent-based modelling toolkit to analyze and compare the impacts of public health interventions against COVID-19 . Review of Artificial Societies and Social Simulation, 27th April 2020. https://rofasss.org/2020/04/27/comokit/ | Gaudou, B., Huynh, N. D., Philippon, D., Brugi√®re, A., Chapuis, K., Taillandier, P., Larmande, P., and Drogoul, A. (2020) COMOKIT: a modeling kit to understand, analyze and compare the impacts of mitigation policies against the COVID-19 epidemic at the scale of a city . Front. Public Health. doi: 10.3389/fpubh.2020.563247 | . General articles . French . COMOKIT | Site Web IRD | Covid-19 : l‚Äôexpertise Sud et le partenariat de l‚ÄôIRD contre la pand√©mie | Site Web IRD | COVID-19 : des partenaires √† la pointe de la lutte | Site Web IRD . | La R&amp;D d‚ÄôEDF et des √©quipes de l‚ÄôIRD s‚Äôallient dans la lutte contre la Covid-19 | Site Web EDF . | COMOKIT, nouvel outil performant sur les politiques d‚Äôintervention | Ambassade de France au Vietnam | Coronavirus : une IA pour √©valuer l‚Äôefficacit√© des politiques sanitaires | Futura Sciences | Les Syst√®mes Multi-Agents dans la lutte contre le COVID-19 | This Amazing A.I. | M√©morandum Covid-19 pour du libre et de l‚Äôopen en conscience : enseignements et impulsions futures | Medium | . English . Coronavirus: an AI to assess the effectiveness of health policies | ORS AI NEWS | . Italian . Intelligenza artificiale contro Coronavirus/ Studio in corso su popolazioni simulate | Il Sussidiario | . Videos . French . La R&amp;D d‚ÄôEDF et l‚ÄôIRD face au Covid 19 gr√¢ce √† l‚ÄôIA | Youtube EDF | . Vietnamese . VTV1 COMOKIT - Vietnamese official TV news (from 21:00) | .",
    "url": "https://comokit.org/docs/press",
    "relUrl": "/press"
  }
  ,"9": {
    "title": "Applying COMOKIT",
    "content": "Applying COMOKIT . How to apply COMOKIT to your own dataset . . Introduction | Duplicate the COMOKIT Template Project in your workspace | Create a new case study | Create a new experiment | . Introduction . This section describes the simplest way to use COMOKIT to explore the impact of control policies in a given case study (a case study defined by its geographical location and boundaries, possibly GIS data on the built environment, and possibly population data). GAMA (with COMOKIT) must of course be already installed and running. If it is not the case, please refer to the Getting Started documentation page . Duplicate the COMOKIT Template Project in your workspace . When defining a new case study, the easiest way to proceed is to create a new project, which contains the specific model files (extensions of the base model, new experiments, etc.), the datasets containing the different input data of the case study and other assets related to the case study. . COMOKIT provides a defaut template (i.e. not functional per se) project that defines the basic layout of a COMOKIT project and provides templates to build new experiments. . The first step is to duplicate (and rename) this template project so that it becomes a new project in the User models section of the workspace. . Locate it first (either in the Library models or in the User models depending on your installation of COMOKIT): . . Copy the whole project: . . Paste it into User models: . . Verify it is correctly placed: . . Create a new case study . In order to declare or apply an experiment to a new case study, COMOKIT requires a minimal dataset that should be, at least, composed of: . Spatial data: . boundary.shp [Required]: this file should contain the boundary of the case study. It is the only file absolutely required to define a new case study. More information about shapefiles and repositories are available here or using the DIVA repsitory. Videos showing how to download Shapefiles for a particular area are also available here and here. . | buildings.shp [Optional]: this file should contain the buildings of the case study. Buildings are in COMOKIT the places where Individuals‚Äô activities are held. The shapefile attributes table should contain a column named type containing the type of the building according to the OSM specifications. If buildings are not available for the case study, COMOKIT proposes a model (in COMOKIT/Utilities/Generate GIS Data.gaml) that requests OSM servers with respect to the area defined in boundary.shp and attempts to build the buildings.shp file automatically. This short video will guide you through this process: . | . | . You can find examples of complete datasets in the default datasets folder included in COMOKIT (folder COMOKIT/Datasets in your workspace) or in the additional datasets repository. . Demographic data: . population.csv [Optional]: a file that contains individuals with some basic attributes, i.e. age, gender, employement status and household identifier. If this file is not present, the population will be generated based on the buildings available. . | satellite.png and satellite.pgw [Optional]: if modelers want to add a georeferenced background image (e.g. from GoogleMap). . | . | Parameters: . | . The parameters of the different sub-models can all be specified, either in the GAML code of the new experiment or in their own configuration files. See how to do it on this page. . Create a new experiment . In the new project created after the template, choose to create a new model file. GAMA will detect the templates present in your project and propose to use one of them as the basis of the new experiment. . Create a new model file (not ‚Äì yet ‚Äì a new experiment file: model files are more flexible): . . Several templates (corresponding to the ones present in (Your Project/templates) are proposed in addition to the basic ones: . . The new model is automatically placed in the models subfolder. If the dataset is correctly created and located, the experiment it defines can be run immediately. . .",
    "url": "https://comokit.org/docs/setupYourOwn",
    "relUrl": "/setupYourOwn"
  }
  
}
